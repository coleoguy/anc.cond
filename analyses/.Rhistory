null.dist3 <- ProcessNullNoMean(null.anc.cond,iter)
plot(density(null.dist3$`12`, na.rm = T),
main = ' Mean',
xlim= c(min(c(null.dist3$`12`,
obs.dist3$`12`)),
max(c(null.dist3$`12`,
obs.dist3$`12`))),
xlab = 'Ancestral Condition',
ylab = 'Frequency')
lines(density(obs.dist3$`12`,na.rm = T), col = 'red')
legend(x = 'topright', legend = c('Observed', 'Null'), col  = c('red', 'black'), lwd = 2)
results <- list(obs.dist1, null.dist1)
names(results) <- c("observed","null")
pvals <- CalcPVal(results, n.tails)
##### Unidirectional #####
library(phytools)
library(geiger)
library(diversitree)
ntaxa <- 200
scale.factor <- 10
rate <- .1
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = ntaxa,
include.extinct = F)[[1]]
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in tree
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= ntaxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= ntaxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
# we leave the original tree un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if((0.05 * ntaxa) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * ntaxa)){
good.sim <- T
}
}
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
drop.state = 2
mat = c(0,0,1,0)
pi = c(1,0)
nsim <- 100
iter <- 100
n.tails <- 1
message <- T
make.plot <- T
rm(list=ls()[-c(24,6,8,14,21,16,18,10,15,14,13)])
source('internal.functions.R')
InputTesting(tree,
data,
drop.state,
mat,
pi,
n.tails,
nsim,
iter)
unpackeddata <- UnpackData(data, drop.state)
dt.vec <- unpackeddata[[1]]
ct.vec <- unpackeddata[[2]]
rm(unpackeddata)
if(message) cat("Estimating ancestral states for the continuous trait\n")
anc.states.cont.trait <- anc.ML(tree, ct.vec, model = "BM")
if(message) cat('Simulating stochastic mappings:\n')
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(mat,2),
nsim = nsim,
pi = pi,
Q = 'mcmc',
message = message)
observed.anc.cond <- list()
null.anc.cond <- list()
meantrans <- vector(length = 2)
names(meantrans) <- c('12','21')
for(j in 1:nsim){
if(message){
cat('\014')
cat('Analyzing map: ',j,' of ', nsim)
}
observed.anc.cond[[j]] <- exctractAncestral(current.map = anc.state.dt[[j]],
anc.states.cont.trait, count = T)
meantrans[1] <- meantrans[1] + observed.anc.cond[[j]]$ntrans[1]
meantrans[2] <- meantrans[2] + observed.anc.cond[[j]]$ntrans[2]
observed.anc.cond[[j]]$ntrans <- NULL
# creating the null
null.anc.cond[[j]] <- CreateNull(tree = tree,
iter = iter,
current.map = anc.state.dt[[j]],
anc.states.cont.trait = anc.states.cont.trait)
}
meantrans <- meantrans / nsim
meantrans <- meantrans / nsim
obs.dist1 <- ProcessObserved(observed.anc.cond)
null.dist1 <- ProcessNull(null.anc.cond, iter)
plot(density(null.dist1[[1]], na.rm = T),
main = 'Mean of Means',
xlim= c(min(c(null.dist1[[1]],
obs.dist1[1])),
max(c(null.dist1[[1]],
obs.dist1[1]))),
xlab = 'Ancestral Condition',
ylab = 'Frequency')
abline(v=obs.dist1[1], col = 'red')
##### Unidirectional #####
library(phytools)
library(geiger)
library(diversitree)
ntaxa <- 200
scale.factor <- 1
rate <- .1
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = ntaxa,
include.extinct = F)[[1]]
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in tree
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= ntaxa){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= ntaxa){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
# next we perform the following analysis on this tree for each of the scaling factors
# we leave the original tree un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, 0, rate, 0), 2),
model = 'discrete',
root = 1)
if((0.05 * ntaxa) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * ntaxa)){
good.sim <- T
}
}
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
drop.state = 2
mat = c(0,0,1,0)
pi = c(1,0)
nsim <- 100
iter <- 100
n.tails <- 1
message <- T
make.plot <- T
rm(list=ls()[-c(24,6,8,14,21,16,18,10,15,14,13)])
InputTesting(tree,
data,
drop.state,
mat,
pi,
n.tails,
nsim,
iter)
# should we unit length the tree???
# prepare data format
unpackeddata <- UnpackData(data, drop.state)
dt.vec <- unpackeddata[[1]]
ct.vec <- unpackeddata[[2]]
rm(unpackeddata)
# ASR for the continuous trait
if(message) cat("Estimating ancestral states for the continuous trait\n")
anc.states.cont.trait <- anc.ML(tree, ct.vec, model = "BM")
# Stochastic map for discrete trait using stochastic mappings to nail
# down specific transition points
if(message) cat('Simulating stochastic mappings:\n')
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(mat,2),
nsim = nsim,
pi = pi,
Q = 'mcmc',
message = message)
# processing our stoch maps to extract the ancestral condition and
# construct the null
observed.anc.cond <- list()
null.anc.cond <- list()
meantrans <- vector(length = 2)
names(meantrans) <- c('12','21')
for(j in 1:nsim){
if(message){
cat('\014')
cat('Analyzing map: ',j,' of ', nsim)
}
observed.anc.cond[[j]] <- exctractAncestral(current.map = anc.state.dt[[j]],
anc.states.cont.trait, count = T)
meantrans[1] <- meantrans[1] + observed.anc.cond[[j]]$ntrans[1]
meantrans[2] <- meantrans[2] + observed.anc.cond[[j]]$ntrans[2]
observed.anc.cond[[j]]$ntrans <- NULL
# creating the null
null.anc.cond[[j]] <- CreateNull(tree = tree,
iter = iter,
current.map = anc.state.dt[[j]],
anc.states.cont.trait = anc.states.cont.trait)
}
meantrans <- meantrans / nsim
source('internal.functions.R')
InputTesting(tree,
data,
drop.state,
mat,
pi,
n.tails,
nsim,
iter)
# should we unit length the tree???
# prepare data format
unpackeddata <- UnpackData(data, drop.state)
dt.vec <- unpackeddata[[1]]
ct.vec <- unpackeddata[[2]]
rm(unpackeddata)
# ASR for the continuous trait
if(message) cat("Estimating ancestral states for the continuous trait\n")
anc.states.cont.trait <- anc.ML(tree, ct.vec, model = "BM")
# Stochastic map for discrete trait using stochastic mappings to nail
# down specific transition points
if(message) cat('Simulating stochastic mappings:\n')
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(mat,2),
nsim = nsim,
pi = pi,
Q = 'mcmc',
message = message)
# processing our stoch maps to extract the ancestral condition and
# construct the null
observed.anc.cond <- list()
null.anc.cond <- list()
meantrans <- vector(length = 2)
names(meantrans) <- c('12','21')
for(j in 1:nsim){
if(message){
cat('\014')
cat('Analyzing map: ',j,' of ', nsim)
}
observed.anc.cond[[j]] <- exctractAncestral(current.map = anc.state.dt[[j]],
anc.states.cont.trait, count = T)
meantrans[1] <- meantrans[1] + observed.anc.cond[[j]]$ntrans[1]
meantrans[2] <- meantrans[2] + observed.anc.cond[[j]]$ntrans[2]
observed.anc.cond[[j]]$ntrans <- NULL
# creating the null
null.anc.cond[[j]] <- CreateNull(tree = tree,
iter = iter,
current.map = anc.state.dt[[j]],
anc.states.cont.trait = anc.states.cont.trait)
}
meantrans <- meantrans / nsim
null.anc.cond
head(null.anc.cond)
observed.anc.cond
obs.dist1 <- ProcessObserved(observed.anc.cond)
null.dist1 <- ProcessNull(null.anc.cond, iter)
plot(density(null.dist1[[1]], na.rm = T),
main = 'Mean of Means',
xlim= c(min(c(null.dist1[[1]],
obs.dist1[1])),
max(c(null.dist1[[1]],
obs.dist1[1]))),
xlab = 'Ancestral Condition',
ylab = 'Frequency')
abline(v=obs.dist1[1], col = 'red')
legend(x = 'topright', legend = c('Observed', 'Null'), col  = c('red', 'black'), lwd = 2)
results <- list(obs.dist1, null.dist1)
names(results) <- c("observed","null")
pvals <- CalcPVal(results, n.tails)
View(data)
contMap(data[,2])
contMap(tree,data[,2])
contMap(tree,ct.vec)
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
contMap(tree,ct.vec)
boxplot(data[,3])
boxplot(data[,2]~data[,3])
contMap(tree,ct.vec)
tiplabels(pch = 16,col = rainbow)
tiplabels(pch = 16,col = rainbow(2)[data[,3]])
View(data)
tiplabels(pch = 16,col = rainbow(2)[data[,3]])
obs.dist3 <- ProcessObservedNoMean(observed.anc.cond)
null.dist3 <- ProcessNullNoMean(null.anc.cond,iter)
plot(density(null.dist3$`12`, na.rm = T),
main = 'No Mean',
xlim= c(min(c(null.dist3$`12`,
obs.dist3$`12`)),
max(c(null.dist3$`12`,
obs.dist3$`12`))),
xlab = 'Ancestral Condition',
ylab = 'Frequency')
lines(density(obs.dist3$`12`,na.rm = T), col = 'red')
legend(x = 'topright', legend = c('Observed', 'Null'), col  = c('red', 'black'), lwd = 2)
results <- list(obs.dist1, null.dist1)
names(results) <- c("observed","null")
pvals <- CalcPVal(results, n.tails)
plot(hist(null.dist3$`12`, na.rm = T),
main = 'No Mean',
xlim= c(min(c(null.dist3$`12`,
obs.dist3$`12`)),
max(c(null.dist3$`12`,
obs.dist3$`12`))),
xlab = 'Ancestral Condition',
ylab = 'Frequency')
hist(null.dist3$`12`, na.rm = T)
hist(obs.dist3$`12`,na.rm=T)
warnings()
mean(obs.dist3$`12`,na.rm=T)
lines(density(obs.dist3$`12`,na.rm = T), col = 'red')
hist(null.dist1)
hist(null.dist1[[1]])
mean(null.dist3$`12`)
mean(obs.dist3[[1]])
obs.dist1 <- ProcessObserved(observed.anc.cond)
null.dist1 <- ProcessNull(null.anc.cond, iter)
plot(density(null.dist1[[1]], na.rm = T),
main = 'Mean of Means',
xlim= c(min(c(null.dist1[[1]],
obs.dist1[1])),
max(c(null.dist1[[1]],
obs.dist1[1]))),
xlab = 'Ancestral Condition',
ylab = 'Frequency')
abline(v=obs.dist1[1], col = 'red')
legend(x = 'topright', legend = c('Observed', 'Null'), col  = c('red', 'black'), lwd = 2)
?? sim.history
plot(anc.state.dt[[1]])
observed.anc.cond
observed.anc.cond[[1]]
plot(anc.state.dt[[2]])
observed.anc.cond[[2]]
anc.state.dt[[1]]$Q
sim.anc.state.dt <- sim.history(tree=tree, Q=anc.state.dt[[1]]$Q,
nsim=1, message = F,
anc = 1)
sim.anc.state.dt <- sim.history(tree=tree, Q=anc.state.dt[[1]]$Q,
nsim=1, message = F,
anc = c(1,0))
current.map = anc.state.dt[[j]]
current.Q <- current.map$Q
if(sum(current.Q == 0)>0){
current.Q[current.Q == 0] <- c(10^(-25),-10^(-25))
cat('\n')
print("Your estimated transition matrix has a rate of zero for some parameters these are being set to 10e-25 for simulation purposes")
}
root.state <- c(0,0)
names(root.state) <- 1:2
root.state[names(root.state) == names(current.map$maps[[1]])[1]] <- 1
nulldist <- vector(length=iter, mode="list")
for(n in 1:iter){
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
while(good.sim == F){
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
##### TODO make realistic constraint
##### number of transitions must match the emperical
##### inlcude timeout model adequacy printout
if(length(unique(sim.anc.state.dt$states))>1){
#      sim.anc.state.dt$mapped.edge[sim.anc.state.dt$mapped.edge == 0] <- NA
#      if(sum(complete.cases(sim.anc.state.dt$mapped.edge)) >= 1){
good.sim <- T
#     }
}
}
nulldist[[n]] <-  exctractAncestral(current.map = sim.anc.state.dt,
anc.states.cont.trait = anc.states.cont.trait)
}
plot(sim.anc.state.dt)
current.Q
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
sim.anc.state.dt <- sim.history(tree=tree, Q=current.Q,
nsim=1, message = F,
anc = root.state)
plot(sim.anc.state.dt)
load("~/Documents/GitHub/Ancestral-Condition-Test/To Dropbox/ancCond/ancCond/analyses/UnidirectionalScalingAnalysisResults.RData")
sum(scaling.uni.results[,1]<.05)
load("~/Documents/GitHub/Ancestral-Condition-Test/To Dropbox/depreciated/results/UnidirectionalScalingAnalysisResults.RData")
sum(scaling.uni.results[,1] < .05)
head(scaling.uni.results)
